apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app
  namespace: production
  labels:
    app: web-app
    component: web
spec:
  # 4 реплики для обработки пиковой нагрузки (по условию теста)
  replicas: 4
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  
  selector:
    matchLabels:
      app: web-app
      component: web
  
  template:
    metadata:
      labels:
        app: web-app
        component: web
        # Добавляем pod anti-affinity метки для распределения по зонам
        topology.kubernetes.io/zone: ""
    
    spec:
      # Важно: распределяем поды по разным нодам и зонам для отказоустойчивости
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["web-app"]
              topologyKey: topology.kubernetes.io/zone
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["web-app"]
              topologyKey: kubernetes.io/hostname
      
      # Tolerations для возможного распределения по разным нодам
      tolerations:
      - key: "dedicated"
        operator: "Equal"
        value: "web-app"
        effect: "NoSchedule"
      
      containers:
      - name: web-app
        image: your-registry/web-app:latest
        imagePullPolicy: IfNotPresent
        
        # Ресурсы основаны на предоставленной информации
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"  # 0.05 CPU - базовая потребность
          limits:
            memory: "256Mi"  # Запас памяти для пиковых нагрузок
            cpu: "500m"      # 0.5 CPU для обработки начальных запросов
        
        # Настройки для медленного старта приложения
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          failureThreshold: 30  # 5-10 сек инициализации × 3 попытки = 30-60 сек
          periodSeconds: 5
          timeoutSeconds: 3
        
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 15  # Ждем завершения startup probe
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 2
          failureThreshold: 1
        
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        
        # Environment variables для конфигурации
        env:
        - name: JAVA_OPTS
          value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"
        - name: INIT_TIMEOUT
          value: "10000"  # 10 секунд таймаут инициализации
        
        # Безопасность - ограничиваем права
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
